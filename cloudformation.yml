AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy a Flask app on ECS Fargate with observability.

Parameters:
  ECRImageUri:
    Type: String
    Description: URI of the Docker image in ECR.

Resources:
  FlaskAppCluster:
    Type: AWS::ECS::Cluster
    Properties: {}

  FlaskAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: flask-app
          Image: !Ref ECRImageUri
          PortMappings:
            - ContainerPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/flask-app
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  FlaskAppService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FlaskAppCluster
      TaskDefinition: !Ref FlaskAppTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED

  FlaskAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/flask-app
      RetentionInDays: 7

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecs-execution-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  FlaskAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to Flask app
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: https
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref FlaskAppCluster

  ServiceName:
    Description: ECS Service Name
    Value: !Ref FlaskAppService

  TaskDefinition:
    Description: Task Definition ARN
    Value: !Ref FlaskAppTaskDefinition

  LogGroup:
    Description: Log Group Name
    Value: !Ref FlaskAppLogGroup