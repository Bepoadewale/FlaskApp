AWSTemplateFormatVersion: "2010-09-09"
Description: Automated infrastructure provisioning for FlaskAppService with pre-existing ECR repository.

Resources:
  # VPC
  FlaskAppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: FlaskAppVPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FlaskAppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FlaskAppVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: FlaskAppInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FlaskAppVPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref FlaskAppVPC
      Tags:
        - Key: Name
          Value: FlaskAppPublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  FlaskAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS access
      VpcId: !Ref FlaskAppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: FlaskAppSecurityGroup

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/flaskapp:*"

  # ECS Cluster
  FlaskAppCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: flaskapp-cluster

  # ECS Task Definition
  FlaskAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: flaskapp-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: flaskapp-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/zayzoon:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp

  # ECS Service
  FlaskAppService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: flaskapp-service
      Cluster: !Ref FlaskAppCluster
      TaskDefinition: !Ref FlaskAppTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref FlaskAppSecurityGroup
          AssignPublicIp: ENABLED

 # CloudWatch Log Group
  FlaskAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/flaskapp
      RetentionInDays: 7 # Retain logs for 7 days
  
  # CloudWatch Alarm for high CPU utilization
  HighCPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUUtilization
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: flaskapp-service
        - Name: ClusterName
          Value: flaskapp-cluster
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref CloudWatchSNS
      OKActions:
        - !Ref CloudWatchSNS
      TreatMissingData: missing

  # SNS Topic for Alarm Notifications
  CloudWatchSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: FlaskAppAlarms
      Subscription:
        - Protocol: email
          Endpoint: coginni@gmail.com 

Outputs:
  VpcId:
    Description: ID of the VPC
    Value: !Ref FlaskAppVPC

  SubnetIds:
    Description: List of Public Subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  SecurityGroupId:
    Description: ID of the Security Group
    Value: !Ref FlaskAppSecurityGroup

  LogGroupName:
    Description: Name of the CloudWatch Log Group
    Value: !Ref FlaskAppLogGroup

  AlarmName:
    Description: Name of the CloudWatch Alarm
    Value: !Ref HighCPUUtilizationAlarm